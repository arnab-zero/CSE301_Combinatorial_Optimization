1 2 3 4 5  6  7  8  9  10
1 5 8 9 10 17 17 20 24 30

## Recursive steps:
1 -> 1
2 -> max(2, 1+1) -> max(5, 2) -> 5
3 -> max(3, 2+1, 1+2) -> max(8, 6) -> 8
4 -> max(4, 3+1, 2+2, 1+3) -> max(9, 9, 10) -> 10
5 -> max(5, 4+1, 3+2, 2+3, 1+4) => max(10, 10, 13, 13, 10) => 13
6 -> max(6, 5+1, 4+2, 3+3, 2+4, 1+5) => max(17, 11, 14, 16, 11) => 17


## Iterative function:
int rod_cut(int length, int price[], int optimal_price[]) {
    int maxPrice = price[length];    // for each length, corresponding index.

    for(int i=1; i<length/2; ++i){
         maxPrice = max(maxPrice, optimal_price[i] + optimal_price[n-i]);
    }

    return maxPrice;
}



10 
1 1
2 5
3 8
4 9
5 10
6 17
7 17
8 20
9 24
10 30 

